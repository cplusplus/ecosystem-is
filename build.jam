import toolset ;
import feature ;

feature.feature doc-stage : draft final : propagated symmetric ;
feature.feature verbose : off on : propagated incidental ;
feature.feature license : off on : propagated symmetric ;

project /ecosystem
	: build-dir .build/b2
	;

local tex-src = [ glob src/eco_*.tex src/in_*.tex src/*.ist ] ;
local latexmkrc = [ glob src/*latexmkrc* ] ;
local _ = " " ;

rule latex-defs ( properties * )
{
	local pretex ;
	if <doc-stage>final in $(properties)
	{
		pretex += "\\\\def\\\\isofinal{yes}" ;
	}
	if <license>on in $(properties)
	{
		pretex += "\\\\def\\\\license{yes}" ;
	}
	return <flags>"-usepretex=\"$(pretex:J= )\"" ;
}

make ecosystem.pdf : src/ecosystem.tex
	:	@latexmk
	:	<dependency>$(tex-src)
		<verbose>on:<flags>-verbose
		<verbose>on:<flags>-diagnostics
		<flags>-r$(_)"$(latexmkrc[1])"
		<conditional>@latex-defs
	;
explicit ecosystem.pdf ;

rule install-name ( properties * )
{
	local name = ecosystem-is ;
	if <doc-stage>draft in $(properties) { name += draft ; }
	if <doc-stage>final in $(properties) { name += final ; }
	if <license>on in $(properties) { name += ccby4 ; }
	return <name>$(name:J=-).pdf ;
}

install ecosystem-is
	:	ecosystem.pdf
	:	<location>.
		<conditional>@install-name
	;

# Generic latexmk action.

toolset.flags $(__name__).latexmk FLAGS <flags> ;

actions latexmk
{
	export TEXINPUTS="$(>:D):${TEXINPUTS}"
	latexmk -f -pdf -interaction=nonstopmode -logfilewarnings- -shell-escape -gg -outdir="$(<:D)" -auxdir="$(<:D)" -makeindexfudge $(FLAGS) "$(>:D=)"
}
